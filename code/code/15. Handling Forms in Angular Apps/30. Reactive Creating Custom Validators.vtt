WEBVTT

00:02.790 --> 00:08.890
So in the last lectures we learned a lot about the creation and configuration and usage of our own forms.

00:08.910 --> 00:14.550
Now let's use another cool feature we can easily implement when using the reactive approach adding our

00:14.550 --> 00:15.900
own validators.

00:15.930 --> 00:20.880
Thus far we always used to build and wants and to be honest with all the built in ones.

00:20.910 --> 00:24.250
You should be able to cover most of your use cases.

00:24.480 --> 00:29.400
But let's say we have some user names you don't want to allow the user to use.

00:29.400 --> 00:37.770
In this case I will go to my types called file and here I'll add a new property forbidden user names

00:37.800 --> 00:40.000
for example and then Azariah.

00:40.140 --> 00:49.990
I'll add Chris and Anna as forbidden usernames if read like this.

00:50.110 --> 00:56.080
So now I want to create my own validator which checks whether the user name user entered is one of the

00:56.080 --> 00:58.890
two usernames specified here.

00:58.960 --> 01:01.860
Now a new validator can be added pretty easily.

01:02.020 --> 01:08.140
A validator Indianised just a function which gets executed by dangler automatically when it checks the

01:08.140 --> 01:11.950
validity of the form control and it checks their validity.

01:11.950 --> 01:13.890
Whenever you change that control.

01:14.050 --> 01:16.690
So a validator is just a function.

01:17.110 --> 01:22.830
Let's name it forbidden names.

01:23.990 --> 01:29.940
Now a validator to work correctly needs to receive an argument which is to control it should check.

01:30.170 --> 01:37.040
So this will be of type for and control a validator also needs to return something for angle or to be

01:37.040 --> 01:39.830
able to handle the return value correctly.

01:39.830 --> 01:43.220
This something should be a javascript object.

01:43.220 --> 01:46.020
And now the following notation might look strange.

01:46.460 --> 01:53.660
It should have any key which can be interpreted as a string and is just type of syntax for saying hey

01:53.720 --> 01:59.810
we want to have a key value pair where the key again can be interpreted as a string which is true for

01:59.900 --> 02:02.280
a key and an object in general.

02:02.450 --> 02:06.390
More importantly the value of that key value pair.

02:06.530 --> 02:08.610
There should be a boolean.

02:09.050 --> 02:18.660
So this function here should return something like let's say an object where we have name is forbidden.

02:18.670 --> 02:23.980
This would be the key name which is interpreted as a string and it could be true.

02:24.420 --> 02:26.370
So this is what this function should return in the end.

02:26.370 --> 02:34.040
For example the message itself the key name is up to us and therefore we can now add the logic in this

02:34.040 --> 02:40.850
function in our case you know I want to check if the value of the control is part of these forbidden

02:40.880 --> 02:42.220
usernames array.

02:42.380 --> 02:48.170
So I want to check if this forbidden user names index off.

02:48.170 --> 02:55.370
So if it contains a certain element and the element is the value of our control we pass year to control

02:55.370 --> 03:00.680
we're checking if this is the case I want to return an object.

03:00.910 --> 03:05.670
Whereas say name is for bidin.

03:05.680 --> 03:10.470
Any short error code you want is true.

03:11.640 --> 03:13.510
Now any advocate is.

03:13.710 --> 03:15.070
I want to return now.

03:15.180 --> 03:16.610
And now this is important.

03:17.040 --> 03:23.050
If validation is successful you have to pass nothing or NULL.

03:23.070 --> 03:28.310
You should not pass this object with force.

03:28.320 --> 03:32.330
This might sound counter-intuitive but that's just how it works.

03:32.340 --> 03:33.590
It should be null.

03:33.600 --> 03:36.540
Or you simply omit the return statement.

03:36.930 --> 03:41.380
This is how you tell angler that the form control is valid.

03:41.850 --> 03:47.330
Well then this is all with our own form validator or own validator here.

03:47.370 --> 03:53.580
Important it receives to control and it returns this object with an error code and then true.

03:53.580 --> 03:56.310
For example if it is invalid.

03:56.490 --> 04:03.250
So now to add this I'll go to my username and actually we now want to assign an array of validators.

04:03.330 --> 04:11.020
All changed is appropriately and I will now add a reference to my forbidden names function again.

04:11.100 --> 04:12.170
Don't execute it.

04:12.240 --> 04:14.010
Only pass a reference.

04:14.190 --> 04:17.600
And now if we save this we get an error.

04:17.880 --> 04:21.890
Now this can be a tough one to spot what's going wrong here.

04:22.930 --> 04:29.120
This error has something to do with the way javascript handles this in forbidden names.

04:29.140 --> 04:32.260
I'm accessing this here.

04:32.260 --> 04:38.460
Now this might look all right because I'm in this class and I access this forbidden usernames.

04:38.920 --> 04:43.410
But think about who is calling these forbidden names.

04:43.420 --> 04:49.720
We're not calling it from inside this class angler we'll call it when it checks the validity.

04:49.720 --> 04:54.770
At this point of time this will not refer to our class here.

04:54.970 --> 05:05.450
So to fix this I actually need to bind this to good old javascript trick to make sure that this refers

05:05.450 --> 05:07.580
to what you wanted to refer to.

05:08.060 --> 05:11.960
So it does in place every now that does recompile.

05:11.960 --> 05:13.720
The error is gone.

05:13.880 --> 05:16.010
Let's now check the validity of this input.

05:16.010 --> 05:17.840
Here it is invalid.

05:18.080 --> 05:22.020
But if I enter test here it stays invalid.

05:22.070 --> 05:24.410
The reason for days is that right now I'm checking.

05:24.410 --> 05:30.420
If control value is part of this array This will return minus one.

05:30.440 --> 05:35.770
If it is not part well minus one is interpreted as true though.

05:36.050 --> 05:41.340
So we need to check if this is not equal to minus 1.

05:41.600 --> 05:45.870
So if this is not equal to minus one that means we did find it.

05:45.890 --> 05:47.520
That means it is invalid.

05:47.570 --> 05:55.830
So now with this in place if we go back inspect again and type test year you see it becomes invalid.

05:56.060 --> 05:59.780
If I type and I your it becomes invalid.

05:59.810 --> 06:03.840
So our own validation year is working fine now.

06:03.950 --> 06:09.070
In the next lecture I will have a look at this strange error code and how we can use that
