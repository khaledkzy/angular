WEBVTT

00:02.200 --> 00:06.020
We dispatched a couple of actions in the last lecture.

00:06.030 --> 00:12.280
Now I want to make sure that in every place any application where we actually fetch the state that we

00:12.280 --> 00:21.630
do this from NCR X and not from those of service for example the off guard here here we also get the

00:21.630 --> 00:24.790
office service and we check if the user is offended that here.

00:24.870 --> 00:26.340
Well no need to do this.

00:26.460 --> 00:28.560
We don't need to inject the off of here.

00:28.680 --> 00:36.050
We Robert and checked the store of type store is still to be imported from NCR X store.

00:36.060 --> 00:43.710
Now I don't need to import you off service but I need to import the application state so our importers

00:43.720 --> 00:51.040
from app and now from my application wide store folder where I have my app reducers because still this

00:51.040 --> 00:55.140
still is the type of my state which is stored by a store.

00:55.330 --> 01:00.140
So from app App State is still the state.

01:00.150 --> 01:02.640
Our storable eventually yield.

01:03.100 --> 01:09.670
Now if we can use select and here for can activate we are allowed to return an observable and observable

01:09.670 --> 01:14.010
which resolves to a boolean and then we can map this.

01:14.020 --> 01:20.310
So here I can simply say this store select and I want to select off here.

01:20.320 --> 01:24.810
Now again this would not yield us a boolean in the end though but that's no issue.

01:24.910 --> 01:35.950
I can simply map something here get my off state which will be of type well off stage so I can import

01:35.950 --> 01:45.790
this as from off from the store file in the off folders and there from the reducers fall and I can see

01:45.790 --> 01:50.120
that this is a type your from off state.

01:50.160 --> 01:57.800
Does the state I will eventually get here and I can map it to a boolean by simply returning of state

01:59.010 --> 02:05.640
authenticated which is a boolean and now this can act with Mefford returns an observable where a map

02:05.640 --> 02:11.430
the value to a value we can use to a boolean by extracting it from the state we receive.

02:11.700 --> 02:13.290
So this card should work.

02:13.290 --> 02:18.250
Now before I check this let me fix the places of the application though.

02:18.270 --> 02:28.080
For example if we scroll to the shared folder here our off interceptor where I do get the token to appended

02:28.110 --> 02:33.110
to every request we send we do does Fritjof service now just as before.

02:33.120 --> 02:34.680
This won't work anymore.

02:34.740 --> 02:43.590
So let's inject our store instead import store from ngi our X store and ask before we should import

02:43.650 --> 02:45.440
our application wide state.

02:45.510 --> 02:54.500
So as from app from the application side app reducers file this will still be our state here.

02:54.630 --> 03:05.700
So from app app state this is our constructor and I also want to import dieoff state so import as from

03:05.740 --> 03:16.390
all of from off store of reducers because this is volatile actually get when selecting the off slice

03:16.690 --> 03:25.870
and just as before I need to get the token here to return my handle with the token Here however we have

03:25.870 --> 03:32.050
a little issue in the past we could get our token synchronously.

03:32.080 --> 03:39.400
Now we get it asynchronously because selecting a slice of our state yields as an observable and that

03:39.400 --> 03:42.130
is an asynchronous object.

03:42.130 --> 03:48.460
It's no issue though because any intercept method we eventually just have to return an observable.

03:48.460 --> 03:53.710
So right now we do this by returning next handler right away but we can also change some observables

03:53.710 --> 03:54.260
here.

03:54.310 --> 03:58.030
Q conveniently well get what we need in the end.

03:58.030 --> 04:09.130
So here I could also return this store select and then the off slice and now of course the need to map

04:09.130 --> 04:16.210
this just as before all to care about next handle later here and then get my of state which is of type

04:16.210 --> 04:24.500
from of state and I want to map this into next hÃ¤ndler which will eventually return.

04:24.510 --> 04:32.670
So here I will return next handle the copied request now can get created in the map function because

04:32.730 --> 04:35.380
there we will have access to the off state.

04:35.460 --> 04:37.620
We get it at this point of time.

04:37.680 --> 04:51.150
So here I can now simply select off state token I have to turn map to switch map though because otherwise

04:51.360 --> 04:57.320
it will return and observable and wrap it into a new absorbable by using switch map.

04:57.330 --> 05:03.210
It won't wrap return the return value in a new observable but instead simply use the return value which

05:03.240 --> 05:04.920
already isn't observable.

05:04.920 --> 05:13.140
So that's why we use which map to use which map I need to unlock it by importing our exercise at operator

05:13.350 --> 05:14.360
switch map.

05:14.490 --> 05:17.650
So that we can use dead operator on an observable.

05:17.730 --> 05:22.850
And again in this case here we select the slice we get the off state which is inoperable.

05:22.980 --> 05:27.740
We executes which map on it to extract the value of the absorbable which will be our off indication

05:27.750 --> 05:28.630
status.

05:28.830 --> 05:34.860
We then clone the request and assigned a token which we can access synchronously because we're inside

05:35.070 --> 05:36.800
the observable handler.

05:37.020 --> 05:41.670
And then we return a new absorbable which takes a launch of this new request and now we got rid of the

05:41.670 --> 05:43.380
office service here too.

05:43.710 --> 05:50.540
Now let's see if this works or if we're using days of service somewhere else in the application does

05:50.650 --> 05:51.820
seems to work.

05:51.820 --> 05:54.620
No let's try and logging in.

05:54.790 --> 05:56.050
This seems to work.

05:56.230 --> 06:01.880
No let's try fetching the values once I deleted our recipe here.

06:01.900 --> 06:02.940
Fetch data.

06:03.800 --> 06:07.630
Well we got an error here so a token is not appended correctly.

06:07.880 --> 06:08.860
Let's see what this does.

06:08.870 --> 06:12.540
That didn't work off because null is the issue.

06:12.590 --> 06:14.720
The problem probably is not dead.

06:14.720 --> 06:20.200
We can fetch the token but that we somehow never said it.

06:20.210 --> 06:23.410
So let's see why this doesn't work in the next lecture.
