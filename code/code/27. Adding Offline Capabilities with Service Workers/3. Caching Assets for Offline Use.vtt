WEBVTT

00:02.370 --> 00:04.760
Now this fall is actually not that long.

00:04.790 --> 00:09.560
It's adjacent fall Jason format and first of all we have the index page.

00:09.560 --> 00:15.630
This indicates what is the root page of our app we want to cash and load and that of course is the next

00:15.620 --> 00:15.840
H.

00:15.850 --> 00:16.670
Tim follow.

00:16.760 --> 00:22.100
Sitting directly in the root server folder we're serving from.

00:22.100 --> 00:25.480
And then we get a so-called asset group or actually asset groups.

00:25.490 --> 00:31.820
It's an array and in there we got to s of groups these objects which we have in there now that groups

00:31.880 --> 00:38.930
are configurations that define which static assets should be cached and how they should be cached dynamic

00:38.950 --> 00:42.170
assets for example would be the data from the API.

00:42.230 --> 00:45.670
So data we're fetching which might change on that API.

00:45.680 --> 00:48.570
So it's not static it changes frequently.

00:48.680 --> 00:55.130
Our team El-Fadl our javascript code will also change with every build but offer to build it static.

00:55.130 --> 00:58.130
It's not changing in some database or anything like that.

00:58.160 --> 00:59.700
So that's what an asset group is.

00:59.720 --> 01:04.980
We can give such a group a name whichever name you like and you can then define how should these assets

01:05.010 --> 01:11.840
be loaded prefetch means that when your page loads angular will go ahead or the service worker will

01:11.840 --> 01:18.170
go ahead and already prefetch all the assets which are specified in this as group which means it puts

01:18.170 --> 01:19.050
it into cash.

01:19.130 --> 01:24.080
Even if you haven't needed them yet the alternative to prefetch is lazy.

01:24.080 --> 01:28.880
You can use debt to and dad would only load them once you needed them at least once.

01:28.910 --> 01:33.890
The advantage of lazy is of course that you don't occupy all the bandwidth right at the beginning.

01:33.890 --> 01:37.410
The downside is that if you need it for the first time it will not be there.

01:37.490 --> 01:43.230
So if the user loses the internet connection before the asset let's say to see is as Fall is required

01:43.230 --> 01:49.490
the first time it will not work because it will not be cashed with prefetch it will be cash even before

01:49.490 --> 01:53.270
you need it there also is update mode.

01:53.270 --> 01:55.100
I guess you can see it down there.

01:55.100 --> 02:00.740
Now this is important for the case that you're pushing a new version of your angular app and data for

02:00.740 --> 02:07.070
all of your service worker to your server and the user is already browsing on that server and it will

02:07.070 --> 02:13.330
get informed about the new service worker and now the service worker can already prefetch the updated

02:13.370 --> 02:17.910
assets or load them easily when they are required.

02:18.050 --> 02:25.340
Now the assets which should be loaded are the resource S10 resources has one key property the files

02:25.670 --> 02:29.670
and there you have an array pointing to the files you want to cache.

02:29.720 --> 02:35.300
You can point at something like the H mail fault and this is always seen relative from the dist folder.

02:35.300 --> 02:38.300
So from the folder you will have in the end want to deploy this.

02:38.630 --> 02:44.690
But you can also set up patterns like every C S S file or every javascript file in the root folder.

02:44.840 --> 02:48.980
Or you could say every C is as file in any subfolder.

02:48.980 --> 02:50.850
This is what this pattern would say.

02:50.990 --> 02:56.480
So you can also set up galop patterns like this or directly point at the file you want to use without

02:56.480 --> 02:59.470
the hash because you can't know the hash in advance.

02:59.570 --> 03:05.240
Angular will generate that automatically will take the unharassed filenames here and then automatically

03:05.240 --> 03:09.740
generate a service worker which will take the hashes into account.

03:09.740 --> 03:12.930
Now here we get a second group for.

03:13.010 --> 03:19.430
Well basically all images we got on it differs from the first one in regarding the fact that it's only

03:19.640 --> 03:25.790
pre-loading dad if we need them if we wisit to them or use them at least once and this is leading to

03:25.790 --> 03:27.860
the behavior we have right now.

03:27.860 --> 03:31.420
Now we got one Alber aesthetic set which is not included here.

03:31.880 --> 03:33.560
And that is our external Funt.

03:33.650 --> 03:39.950
It's not changing or at least not regularly so we can treat it as static but it's not included here

03:39.950 --> 03:42.130
because it's not one of our files.

03:42.410 --> 03:48.470
But we can take it from the index edge HTML file by just copying that entire link which will be requested

03:48.470 --> 03:54.480
eventually and then we can go back to the NGO w conflict file and there we tell angular that we also

03:54.500 --> 03:55.850
want to cache this.

03:55.880 --> 03:59.600
Now we don't edit two files because this is for local faults.

03:59.600 --> 04:03.760
There is an additional resource type in the fine and that is you are.

04:03.760 --> 04:05.970
Else it's also an array of strings.

04:06.080 --> 04:11.720
But here we put you or else like this one which are reaching out to service to then fetch resources

04:11.720 --> 04:12.780
from there.

04:12.890 --> 04:15.340
With that added Let's save that file.

04:15.560 --> 04:22.750
Quit your server down there and let's go back into our root project folder and let's create a number

04:22.790 --> 04:26.570
build with Engy build crotched like this.

04:26.570 --> 04:33.810
And once this is done and we revisit the dist folder and serve that again we should see that the fund

04:34.010 --> 04:42.370
is also loaded in an offline mode so we go into the dist folder into angler P.W. a rerun that H to the

04:42.370 --> 04:45.620
PS server command and lets reload that page.

04:46.640 --> 04:52.790
And with it reload it and you might also close it and open a new tab to ensure that the new service

04:52.790 --> 04:54.460
record gets really loaded.

04:54.470 --> 04:57.840
And it's not still using an old one with that load.

04:57.900 --> 05:02.390
You can take that off line box here again or since I always need it to do that.

05:02.420 --> 05:04.270
Simply turn the Wi-Fi off.

05:04.550 --> 05:07.900
Go to the network tab to see all requests and reload the page.

05:08.000 --> 05:14.420
And now you should see that the fun here all is not marked as read but is actually loading the font

05:14.750 --> 05:15.740
as it should.

05:15.980 --> 05:22.310
So this is now also working it's not all of fetching this and we're still for now again able to use

05:22.310 --> 05:23.320
it in offline mode.

05:23.360 --> 05:24.140
That font.

05:24.140 --> 05:25.580
Now what about the API.
