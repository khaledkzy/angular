WEBVTT

00:02.290 --> 00:09.320
Nodded do we worked quite a bit with HTP sent requests God data transfer data and output our data here.

00:09.370 --> 00:14.260
I also want to dive into two other topics regarding HTP.

00:14.500 --> 00:16.590
One is error handling.

00:16.630 --> 00:23.860
Let me go to my service and then I will remove the Jason at the end of my GET request here.

00:23.890 --> 00:28.960
So I'm just reaching out to slash data and for firebase this will be invalid.

00:28.960 --> 00:30.130
You are.

00:30.520 --> 00:36.850
So now if I reload my app or you don't even need to reload it and it gets service you'll see an error

00:36.850 --> 00:37.540
here.

00:37.780 --> 00:41.940
You see this error message which gets generated by the browser you could say.

00:42.190 --> 00:45.830
And you see we also get a response from firebase and here.

00:45.850 --> 00:54.580
Well we simply get some data not very useful overall not very useful here.

00:54.580 --> 00:58.860
Now imagine that you want to catch errors like this.

00:59.290 --> 01:06.210
You could catch them by going to your service and there you can simply add the catch operator.

01:06.490 --> 01:08.370
Now catch will get any error.

01:08.440 --> 01:13.390
And as you just saw the error is also just of type response so if this response object but it holds

01:13.390 --> 01:21.150
different data of course and then you can simply console lock this error like this.

01:21.190 --> 01:27.280
Now this would not work however because we still need to return and observable here.

01:27.370 --> 01:30.430
I guess this makes sense because we're subscribing to one.

01:30.430 --> 01:36.580
So just like we have to return one in the map case and they're actually the map operator wraps the data

01:36.580 --> 01:38.720
in an observable automatically.

01:38.740 --> 01:44.890
We also have to return an observable here in the catch operator because again we do need this were subscribing

01:44.890 --> 01:50.530
to an app component and we don't know if we get an error or a success response in advance.

01:50.530 --> 01:55.480
So here you could think that we simply return error like this.

01:55.500 --> 02:02.170
However for some reason the catch operator will not wrap our data into an observable automatically.

02:02.390 --> 02:05.210
So here we actually need to create one on our own.

02:05.210 --> 02:06.650
It's very simple though.

02:06.650 --> 02:15.730
We can use the observable object which we need to import from our X shape's slash observable like this.

02:15.790 --> 02:21.630
And here we can call the row method and pastie error response to it.

02:21.640 --> 02:25.640
Now we still Rodi error but we're also logging into the console in between.

02:25.810 --> 02:30.860
So if we save this and get again all now we simply log it twice.

02:30.940 --> 02:36.610
Shouldn't be a surprise because we already logged here in the app component here and now we're just

02:36.610 --> 02:42.080
doing the same here in the catch method but it does show you that this catch method is called.

02:42.100 --> 02:47.800
Now of course here you can transform this error in any way you want to transform a more user friendly

02:47.980 --> 02:48.750
message.

02:48.970 --> 02:55.020
So a more useful usage of catch would be true to transform the error here.

02:55.200 --> 02:59.570
Q Maybe not fro the error but some error message like.

02:59.620 --> 03:02.220
Something went wrong just a string.

03:02.660 --> 03:07.880
An AB component you could now display a modalists error message or something like this here.

03:07.900 --> 03:11.970
I will still log it and error is now just a string.

03:12.100 --> 03:16.610
So now if you let this reload and get service we see something went wrong.

03:16.630 --> 03:19.040
Now this error here at the top you can't hide.

03:19.050 --> 03:24.300
It's from a browser but below you can control what you want to display to the user.

03:24.310 --> 03:27.840
You could even lock his arrows somewhere else whatever you want to do.

03:27.840 --> 03:33.310
It's important to know that the catch method is stare and that you can do some centralized error or

03:33.310 --> 03:37.080
transformation if you need it in your application.

03:37.090 --> 03:38.230
In this operator
