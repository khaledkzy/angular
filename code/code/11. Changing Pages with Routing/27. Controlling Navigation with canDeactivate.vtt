WEBVTT

00:02.720 --> 00:07.780
In the last lectures you learn how to use can actually weight control access to a route.

00:08.000 --> 00:13.600
Now I want to focus on to control of where you are allowed to leave around or not.

00:13.700 --> 00:18.930
We can control this too and we might want to control this if we are locked in.

00:18.950 --> 00:25.270
Once we do edit a server now we for example are allowed to edit the def server.

00:25.610 --> 00:33.440
And here if we actually change something I want to ask the user if he accidentally clicks back or somewhere

00:33.440 --> 00:33.870
else.

00:33.890 --> 00:39.310
If you really want to leave or if you maybe forgot to click update server first.

00:39.620 --> 00:45.490
So this convenience method of keeping the user from accidentally navigating away.

00:45.590 --> 00:47.480
How can we implement this.

00:47.480 --> 00:54.120
Let's go to the edit server component for this here and let's add a new property.

00:54.170 --> 00:56.000
Below will allow edit.

00:56.300 --> 01:04.010
I'll add a change has saved property which is false by default and which I want to change whenever we

01:04.010 --> 01:05.880
click on update server.

01:06.110 --> 01:09.160
Here of course we did upset to update the server.

01:09.170 --> 01:16.240
So I want to call change has saved and said is to true here because now the changes were indeed saved

01:16.670 --> 01:18.510
after the changes were saved here.

01:18.560 --> 01:24.360
I want to navigate away so I will inject the router here type router.

01:24.560 --> 01:31.760
Make sure to add the import at the top as always from the Anglo router package and then your after we

01:32.000 --> 01:33.840
saved our changes.

01:33.910 --> 01:43.180
I want to navigate away a want to go up one level to the last loaded server and Fordham's I will pastie

01:43.250 --> 01:49.080
relative to configuration and want to navigate relative to the currently active route.

01:49.130 --> 01:53.990
So far so good we're changing does change a safe property here.

01:54.020 --> 01:59.630
Now let's make sure that whenever the user tries to accidentally navigate a way that we prevent him

01:59.630 --> 02:07.250
from doing so or at least ask if he really wants to leave now we somehow need to execute this code in

02:07.250 --> 02:13.690
this component here because we will need access to this change a safe method which informs us on whether

02:13.700 --> 02:16.600
this update button was clicked or not.

02:16.790 --> 02:23.840
However a guard always needs to be a service because we need to provide it just like we provided you

02:23.870 --> 02:25.230
off guard.

02:25.280 --> 02:27.000
So somehow just doesn't fit.

02:27.050 --> 02:32.200
We need to access to code and our component and have a service and that sounds like a complicated set

02:32.200 --> 02:35.660
up but it is and it's actually really simple.

02:35.660 --> 02:43.180
In my adult server folder here or add a new file on them it can deactivate guard.

02:43.520 --> 02:50.920
And this again will also be a service as all guards are and in here.

02:51.010 --> 02:57.910
First of all now want to export an interface interface simply is a contract which can be imported by

02:57.910 --> 03:02.800
some other class let's say which forces this class to provide some logic.

03:03.250 --> 03:10.960
So here I will name the scan component deactivate and this interface will require one thing from the

03:10.960 --> 03:13.030
component which implements it.

03:13.060 --> 03:17.080
This component should have a can deactivate method.

03:17.800 --> 03:21.370
This method and that is simply how I define the type of this candidate.

03:21.400 --> 03:25.240
The actual method since it is only an interface it won't contain the actual logic.

03:25.270 --> 03:28.200
It will only contain information how it should look like.

03:28.210 --> 03:33.970
So this mapping should take no arguments but in the end it should return an observable which therefore

03:33.970 --> 03:42.250
needs to be imported and this fall here from our access absorbable which will resolve to a boolean end

03:42.790 --> 03:49.810
or a promise which will resolve to a boolean in the end or just a boolean.

03:49.810 --> 03:53.900
You might recognize this pattern you're from you can activate Guard.

03:54.100 --> 03:56.670
These guards share the same structure.

03:57.040 --> 04:01.130
So dad is my interface.

04:01.200 --> 04:04.650
Nice to have it but that alone won't do the trick.

04:04.650 --> 04:06.240
Now let's come to the important thing.

04:06.300 --> 04:10.950
The meat off this class of service here is say the service itself.

04:10.950 --> 04:16.890
So I'll name it can de-activate guard and discard will implement.

04:16.920 --> 04:24.450
Can de-activate does it say interface provided by the Anglo routers so we need to import it from there.

04:24.450 --> 04:31.410
This actually is a generic type and it will REPP our own interface so it will wrap an interface which

04:31.410 --> 04:38.880
forces some component or some class to implement to Candy ECU add method might sound complicated but

04:38.880 --> 04:46.040
this is the set up which will make sure that we later can easily connect a component to our Candy act

04:46.060 --> 04:47.490
with Gargi year.

04:47.940 --> 04:50.900
So for now let's just go with that piece of information.

04:51.210 --> 04:57.240
And now this class here this guard will also need to have a candy actuator method.

04:57.390 --> 05:02.030
Does a C candy act with method which will be called by the angler router.

05:02.040 --> 05:08.460
Once we try to leave a route therefore this will have the component on which we're currently on as an

05:08.460 --> 05:13.980
argument and this component needs to be of type can component deactivate which means it needs to be

05:13.980 --> 05:17.690
a component which has this interface you're implemented.

05:17.760 --> 05:21.240
Therefore a component which has a candy Edward method.

05:21.360 --> 05:24.740
This will become super important in a second.

05:24.860 --> 05:31.730
We also will received the current drought as an argument so that is the the way that route snapshot

05:32.030 --> 05:36.530
need to make sure to import this to it will have the current state.

05:36.560 --> 05:39.360
So that's a router's state snapshot.

05:39.380 --> 05:42.380
Import this to the next state.

05:42.380 --> 05:44.360
So where do you want to go.

05:44.360 --> 05:50.480
Because remember this will be called at the end when we want to leave around so next state is an optional

05:50.480 --> 05:51.810
argument though.

05:51.980 --> 05:59.360
This will also be a route for state snapshot and this will now also return an observable a promise or

05:59.420 --> 06:00.290
a boolean.

06:00.290 --> 06:08.740
So just like to can activate guard data how do can deactivate method in or can deactivate guard looks

06:08.740 --> 06:09.340
like.

06:09.580 --> 06:16.310
And here I now want to call can de-activate on the component we're currently on.

06:16.480 --> 06:22.510
And this is why I need to implement this interface in this component.

06:22.570 --> 06:29.560
Why I created this interface in the first place because now the angler router can execute candy activate

06:29.650 --> 06:38.200
in our service and can rely on the fact that the component we're currently on has to Candy activate

06:38.200 --> 06:44.920
method 2 because this is what we will actually implement the logic checking whether we are allowed to

06:44.920 --> 06:50.490
leave or not because we need this connection between our guard and component.

06:51.070 --> 06:58.270
So this is why we can safely call candy activate here and now with that information.

06:59.220 --> 07:07.890
We can go back to our app routing module and on the edit page here we want to add does guard.

07:07.950 --> 07:12.150
So we can add Candy acted as a property to this route config.

07:12.240 --> 07:15.010
It takes an array just like can actually wait.

07:15.340 --> 07:21.200
And here we now will point to our can deactivate guard.

07:21.300 --> 07:26.700
Make sure to add the same or they are four and now Anglo will run discard.

07:26.730 --> 07:33.690
Whenever we try to leave this path your device component loaded at this path for this to work.

07:33.690 --> 07:40.110
We of course need to go to our module and provide our acan de-activate guard just like before can you

07:40.120 --> 07:40.680
activate

07:44.650 --> 07:47.550
with dispar wide it make sure to add to import.

07:47.560 --> 07:50.350
We're almost there but one important piece is missing.

07:50.710 --> 07:57.460
Remember that I told you that you can react with guard willingly and call candy actuator or component.

07:57.820 --> 08:07.240
Well for this to work on our added server component here we need to implement our Can component de-activate

08:07.240 --> 08:09.640
interface our own interface.

08:09.790 --> 08:13.960
We export that in our can deactivate Guard service file.

08:13.990 --> 08:21.310
This interface does interface now forces us to implement the candy actuates method and our component

08:21.340 --> 08:28.990
which is import because we tried to call this method on our components here so the edits server component

08:29.010 --> 08:33.360
here I will simply add I can deactivate method.

08:33.350 --> 08:38.150
Now we know how this method should look like because we do find it here.

08:38.290 --> 08:41.580
It should return an observable a promise or a boolean.

08:41.790 --> 08:43.860
So let's make sure that it does.

08:44.170 --> 08:51.690
And now here first of all we need to import observable from observable from our ex-state slash observable

08:52.640 --> 09:00.380
but with that and with the import add it here in can de-activate We now provide the actual logic deciding

09:00.380 --> 09:02.690
on whether we are allowed to leave or not.

09:02.810 --> 09:09.270
This logic will be run whenever you can de-activate Guard is checked by the angler or router.

09:09.560 --> 09:18.300
So here I would quickly check if we're first of all allowed to edit this because if we're not allowed

09:18.300 --> 09:23.150
like this hearable would turn true anyways because we weren't allowed to edit it in the first place

09:23.150 --> 09:24.900
so sure you may leave.

09:25.620 --> 09:37.570
And otherwise I would check if my server name here is unlike the server name we had at the beginning.

09:37.690 --> 09:44.350
Server name here this property is simply bound wired a two way binding to user inputs.

09:44.380 --> 09:51.730
So initially the set to the value we get from outside from the server which was loaded we bind it here

09:52.120 --> 09:55.100
but as soon as we type we will have some differences.

09:55.360 --> 10:00.820
So if we have differences on the server name or on the server status.

10:00.850 --> 10:06.050
So here I also check if this is not the same as before server status.

10:06.130 --> 10:12.580
So if one of the two was changed and now were rapid in parentheses so if one of the two was changed

10:15.390 --> 10:19.680
and the changes we're not saved.

10:19.710 --> 10:22.240
So change is safe is false.

10:22.530 --> 10:23.940
In this case.

10:24.090 --> 10:33.990
I want to return a confirm dialog where I asked the user do you want to discard to change his Oberweis

10:34.260 --> 10:39.290
I will return true because otherwise either nothing was changed or it was changed.

10:39.420 --> 10:42.460
But change is safe to set to true and we did save it.

10:42.470 --> 10:49.140
Indeed with this emplace Let's go back let's go back towards servers.

10:50.200 --> 10:52.340
And first of all log in maybe.

10:52.690 --> 10:56.370
Let's go to the death server which is the one we are allowed to edit.

10:56.510 --> 10:57.420
Enter here.

10:57.790 --> 11:02.590
If I now type something there and it didn't click update server and I click somewhere else.

11:02.590 --> 11:04.660
We are asked if you want to leave.

11:04.690 --> 11:07.520
If I click Cancel we stay on this page.

11:07.570 --> 11:09.960
We may now save our changes.

11:10.820 --> 11:15.970
And then we are navigated away without getting any issues at all.

11:16.070 --> 11:22.220
And the fact that we updated the wrong server simply happens because here we still are always loading

11:22.220 --> 11:24.460
the server with the ID one.

11:24.710 --> 11:27.870
So we should update this to get our real I.D..

11:28.220 --> 11:38.600
So maybe here access our route snapshot Perrin's I.D. and pass this as an I.D. and thereafter of course

11:38.660 --> 11:47.240
also subscribe to roud parents to update the idea of parents change that is something you can do as

11:47.240 --> 11:48.230
an exercise.

11:48.470 --> 11:52.520
And of course make tiers of type number by converting it.

11:52.580 --> 11:57.430
But more importantly your everything's working as it should.

11:57.430 --> 12:03.070
We are only allowed to change this if we did click update our ys we are asked.

12:03.400 --> 12:10.280
Or of course if here once we are asked we click OK we are allowed to discard our change.

12:10.300 --> 12:12.780
So that is true or that is possible too.

12:12.790 --> 12:17.860
But now with Candy added We have this extra protection in place.

12:18.250 --> 12:21.360
So with this we learned a lot about routing in this module.

12:21.370 --> 12:25.960
Now there's one more guard I want to dive into and we will do so in the next lecture
