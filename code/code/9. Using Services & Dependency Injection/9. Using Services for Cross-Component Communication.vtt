WEBVTT

00:02.890 --> 00:09.910
We talked a lot about services in this module and I hope you saw how services can clean our app up make

00:09.910 --> 00:13.870
the code a bit leaner more centralized easier to maintain.

00:13.870 --> 00:21.550
You don't have to build these complex output input chains where you pass events and properties to get

00:21.550 --> 00:24.300
data from component to component B.

00:24.550 --> 00:30.510
It's much leaner now let me show you how much we actually saved.

00:30.850 --> 00:39.430
Let's say that if we click on the button here in the account component for some reason we want to output

00:39.430 --> 00:41.700
something in the new account component.

00:42.130 --> 00:49.600
Normally without services we would have to emit an event in the code component that something was clicked

00:49.600 --> 00:51.760
or something happened so that we changed the status.

00:51.760 --> 00:56.670
For example we would have to catch the event year in app account.

00:56.980 --> 00:59.980
As a side note we can of course remove these events here.

01:00.090 --> 01:02.770
They don't they aren't triggered anymore.

01:03.160 --> 01:10.540
So we would have to catch these events year and then we would have to pass the new data down via property

01:10.540 --> 01:18.310
by adding to the component where we wanted to handle it pretty complicated and building these chains

01:18.310 --> 01:22.240
of property and even binding is not the most convenient way of writing code.

01:22.630 --> 01:27.110
It's so much easier with services let's say in our accounts service year.

01:27.250 --> 01:34.280
We want to provide some event which we can trigger in one component and listened to in a number.

01:34.720 --> 01:44.970
So we could simply add the status update event which could be a new event emitter which we import from

01:44.970 --> 01:46.030
an angular core.

01:46.050 --> 01:53.380
So make sure to add to import at the top which will pass on the new event excuse me the new status.

01:53.400 --> 01:56.010
So a string and yes we could trigger it.

01:56.010 --> 02:02.130
Now here in the upset update status Mefford but we can also since been checked the account service here

02:02.130 --> 02:11.490
where we set a new status call account service status update it and emit this with the new status.

02:11.490 --> 02:12.840
So now I'm emitting any event.

02:12.860 --> 02:19.230
I set up in the service and as a side note later in the observable section you will learn about and

02:19.230 --> 02:27.350
never construct you can use to submit or to admit you've met events and subscribed to it instead of

02:27.350 --> 02:28.710
using the event dimeter.

02:28.880 --> 02:31.070
But for now it's absolutely fine.

02:31.070 --> 02:37.210
So here we are emitting any event again event commital lefse in our service and a new account.

02:37.220 --> 02:38.920
I now want to listen to it.

02:39.200 --> 02:41.740
So here let's say I want to follow an alert.

02:42.110 --> 02:47.470
So I will do this in the constructor for now x has my account service.

02:47.480 --> 02:53.490
And now for the status update at event here I will subscribe to it because event emitter and the just

02:53.490 --> 02:55.660
kind of wraps and observable.

02:56.060 --> 03:02.030
So here I could then received a new status which I know will be a string and then it will simply flow

03:02.030 --> 03:08.660
an alert where I say news stators status something like that.

03:08.670 --> 03:13.530
So now I'm not building any chain of property and event binding.

03:13.530 --> 03:21.300
I do have cross component communication through our servers wifi and emitter and you can see that if

03:21.300 --> 03:28.270
I click a button here they actually got opened on a narrow window but you see this alert was thrown

03:28.360 --> 03:30.280
with the new status unknown.

03:30.460 --> 03:33.450
Same here in active active.

03:33.760 --> 03:40.720
So now we're communicating between components for a service which really can save you a lot of time.

03:40.750 --> 03:46.630
And with that I hope you saw a lot of reasons why services can be very helpful and how you can use them

03:46.630 --> 03:47.540
to your advantage.

03:47.540 --> 03:51.320
Just make sure to use the right amount of instances.

03:51.520 --> 03:57.130
And if you inject services into services make sure to provide the service on the at module level.

03:57.220 --> 04:02.190
And to add at injectable to a service where you want to inject that in.

04:02.590 --> 04:04.600
Let's move on to some assignments now.
