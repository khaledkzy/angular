WEBVTT

00:02.730 --> 00:10.080
Let's understand how syndication works we have to differentiate between a traditional web app full stack

00:10.110 --> 00:17.200
apps you could say where your server renders the use which then HVM all code returned to the client

00:17.730 --> 00:23.350
and a single page application like we're building it here with angular in a traditional wet bed.

00:23.460 --> 00:27.280
We also have client and a server so front and the back end.

00:27.450 --> 00:33.850
But we have a very strong connection between the two because they're super important what the user sees.

00:33.870 --> 00:39.230
The view is the HDMI code is dynamically generated by the server.

00:39.240 --> 00:44.940
So if you're using a server side framework chances are you're using some kind of templating engine to

00:44.940 --> 00:46.580
render out some views.

00:46.590 --> 00:52.830
So in the end the client and that's important will always receive the finished HVM all code in a single

00:52.830 --> 00:54.490
page application does is different.

00:54.510 --> 01:01.890
We only receive one page and the client angler is responsible for changing that HVM all code dynamically.

01:01.890 --> 01:07.650
So back to the traditional web app here if we want to offend equate the client of course sends the off

01:07.650 --> 01:14.220
information so username and password the server will validator information check it in their database

01:14.650 --> 01:20.370
and in the end if it is valid it will create a session and store data session on the server.

01:20.370 --> 01:26.490
Now that's important since we have that close connection between server and client server rendering

01:26.490 --> 01:27.670
the views anyways.

01:28.050 --> 01:32.880
The server is able to remember the client because he's communicating with the client all the time.

01:32.940 --> 01:36.000
Therefore this session is then stored on the server.

01:36.000 --> 01:42.330
For example in a database and the client will get the session cookie which mainly contains the idea

01:42.330 --> 01:48.870
of the session which then can be sent with every request where you want to access some sensible information

01:48.900 --> 01:54.300
or some resource which might be protected so that the server can now check if that cookie is valid if

01:54.300 --> 01:56.000
the session id is correct.

01:56.010 --> 02:01.860
If it has a session for this ID stored on the server again because that's really important.

02:01.860 --> 02:09.510
This is working because we have this close connection between server and Front-End for a single page

02:09.510 --> 02:13.340
application this changes here.

02:13.440 --> 02:18.900
We don't have that strong connection we might reach out to her back and from time to time but that's

02:18.900 --> 02:20.070
not guaranteed.

02:20.070 --> 02:26.400
A lot of the requests and you have to put that into quotation marks the user makes are handled by the

02:26.400 --> 02:27.610
client entirely.

02:27.630 --> 02:32.820
So for example if a list has to be rendered and the data for that list is already stored on the client

02:33.420 --> 02:35.300
it won't reach out to the back and right.

02:35.340 --> 02:38.480
So the HVM code will be changed by angular.

02:38.490 --> 02:41.160
That is what angular is all about.

02:41.190 --> 02:43.650
Therefore we don't have that strong connection.

02:43.650 --> 02:50.130
And besides that maybe we have a very generic back backend exposing a restful API to which we can connect

02:50.130 --> 02:53.280
from several web apps and mobile apps.

02:53.280 --> 02:57.350
So in this case the server will not remember who the client is.

02:57.420 --> 03:03.150
So if we want to offend Kate we still sent you off information and the server will still check it in

03:03.150 --> 03:04.120
the database.

03:04.320 --> 03:10.230
But if that is valid it voluntary the session because again it doesn't regularly communicate with the

03:10.230 --> 03:10.560
client.

03:10.560 --> 03:12.280
It doesn't know the client.

03:12.570 --> 03:16.150
So the server doesn't know the client and hence it can store a session.

03:16.170 --> 03:23.460
Still we want to give the client something which allows the client to kind of inform the server on future

03:23.460 --> 03:29.070
requests that the user is locked in because otherwise the user would have to enter the log in for information

03:29.460 --> 03:33.450
on every request where you want to access some protected resource.

03:33.450 --> 03:38.780
Certainly not a great user experience if you want to allow the user to create a new post and require

03:38.780 --> 03:41.450
a username and password for that new post.

03:41.460 --> 03:44.360
And for every comment and for every like button click.

03:44.760 --> 03:52.140
So therefore the solution is that the server will send back a token adjacent web token typically which

03:52.200 --> 03:59.730
encode some information about the offending Kainat user of course no sensible information and is hashed

03:59.730 --> 04:06.930
with a certain algorithm and a certain secret only known to the server the client now has this token

04:07.410 --> 04:12.810
and if we now want to access some resource on the server which is protected for example create a new

04:12.810 --> 04:13.580
post.

04:13.770 --> 04:19.800
We would simply attach that token to to request insensed the token was generated on the server and we

04:19.800 --> 04:25.770
know the secret and the algorithm to server it is able to validate this token and a randomly generated

04:25.770 --> 04:29.230
token will of course not pass this test.

04:29.520 --> 04:32.000
So therefore we authenticate via this token.

04:32.000 --> 04:38.070
On future requests because we attached this token and the server is able to check of the token is valid

04:38.750 --> 04:42.080
data is how we authenticated a single page application.

04:42.180 --> 04:46.590
So that's the approach we need to take now and we will take this approach.

04:46.590 --> 04:48.760
Firebase makes this very easy.

04:48.930 --> 04:54.210
But if you implement this with a number back and what you will need to do on the front that is somehow

04:54.210 --> 04:58.340
stored a token you get bag and attach it to future requests.
