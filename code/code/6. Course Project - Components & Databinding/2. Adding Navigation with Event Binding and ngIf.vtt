WEBVTT

00:02.440 --> 00:11.320
The thing with which I want to start and this course is to hook up navigation to ever load recipes or

00:11.340 --> 00:13.070
the shopping list.

00:13.290 --> 00:19.630
Now we will later learn a way to do this in the way it is meant to be done but the solution we will

00:19.630 --> 00:22.180
agree at now also is very creative.

00:22.220 --> 00:23.400
Not bad.

00:23.590 --> 00:24.670
I will use energy.

00:24.700 --> 00:28.840
If you only load one of the two sections at a time.

00:28.930 --> 00:36.630
So somehow in my app component probably because that is where I include both here.

00:36.670 --> 00:43.660
I will need to manage which one ship be displayed and I should determine which one is displayed in the

00:43.660 --> 00:44.970
head or component.

00:45.250 --> 00:52.120
So I should kind of passed the information which a link was clicked there to my app component so that

00:52.120 --> 00:58.280
I can then switch a property dare to only display one of these two components.

00:58.300 --> 01:02.200
I will admit that this task involves multiple steps.

01:02.200 --> 01:07.840
It doesn't cover anything you haven't learnt Thus far though so definitely take this as a challenge

01:08.230 --> 01:12.250
to implement such a navigation on your own.

01:12.550 --> 01:18.730
Emitting some event in the header which allows us to determine which component should be displayed here

01:18.730 --> 01:20.060
in the app component.

01:20.230 --> 01:27.600
Now's your chance to pause the video will do it to Gebre thereafter.

01:27.630 --> 01:29.520
So where are you successful.

01:29.520 --> 01:34.840
Here is my solution how we could get this to work the way we want it to work.

01:34.960 --> 01:38.490
I'll start any hetero component template here.

01:38.610 --> 01:44.030
We got these two links and I want to attach some klick listeners to Rieslings.

01:44.430 --> 01:48.740
Here I will say on select and I will pass a string.

01:48.740 --> 01:55.830
Your recipe maybe we can of course pass our own data to the methods we execute here and here.

01:55.830 --> 02:03.990
I will select a number one or add a number click listener and I will say on select shopping list.

02:04.090 --> 02:09.940
You can of course also work with numbers there or fire to totally different methods.

02:10.480 --> 02:13.620
So that is my on select method.

02:13.780 --> 02:20.460
Now in the head or component I of course need to implement on select and we get an argument here.

02:20.510 --> 02:22.580
We pass it year right.

02:22.570 --> 02:25.030
We get a string on what to select.

02:25.210 --> 02:30.770
So maybe let's name it feature and that will be a string.

02:30.910 --> 02:36.550
So let's assign the type string here by adding a colon and string there after and now as I said I want

02:36.550 --> 02:38.160
to emit my own event.

02:38.330 --> 02:40.250
Hey we learned how to do this.

02:40.270 --> 02:48.120
First of all I'll need to add a new property which all name feature selected.

02:48.310 --> 02:51.760
You can of course choose another name if you want.

02:51.760 --> 03:02.090
This should be a new event in medder And now remember event emitter is imported from at angular core.

03:02.170 --> 03:05.920
That's a generic type and we will pass a string here.

03:05.950 --> 03:11.010
The feature which was selected in the end and we have to add parentheses to instantiate this.

03:11.020 --> 03:17.080
So to create an object based on the event dimeter class that is our feature.

03:17.080 --> 03:18.840
Select that event.

03:18.850 --> 03:25.930
Now I want to use this property which now holds this event emitter as a value to emit the event whenever

03:25.930 --> 03:30.000
we click one of the buttons and I will then embed feature.

03:30.040 --> 03:37.780
So this string we receive from these method calls here in our template well with that and place the

03:37.780 --> 03:44.400
missing pieces to and able days event to be listened to from outside of this component.

03:44.590 --> 03:49.960
So we have to attach something to it as property to make it less honorable from the parent component

03:50.080 --> 03:57.550
the AB component of this case that something SD the output decorator don't forget the parentheses.

03:57.700 --> 04:04.180
Which also needs to be imported from an angle angler core and output enables us to use this event or

04:04.210 --> 04:07.230
to listen to it from the parent component.

04:07.540 --> 04:14.050
So in the app component which is the parent component which adds an adder here or here I will listen

04:14.050 --> 04:21.230
to the features selected event and then here I will execute on navigate let's say and of course I'm

04:21.250 --> 04:24.970
interested in the data I'm receiving from feature selected.

04:25.300 --> 04:28.000
So I can get access to it with Dolorosa event.

04:28.120 --> 04:35.680
There's protected name we could use in the template to get access to any data and event passes to us.

04:36.060 --> 04:43.400
Now just because this might be confusing if you don't specify dollar sign event you're But Obert data

04:44.800 --> 04:47.400
data like we did here right.

04:47.410 --> 04:52.300
We kind of overrode dollar sign U-bend that doesn't actually override that.

04:52.330 --> 04:59.200
You simply determine which data you want to pass to your own method and dollar sign event may also be

04:59.200 --> 05:06.880
used as a second argument here dollar sign event will always refer to the event data anywhere between

05:06.880 --> 05:08.480
these quotation marks here.

05:08.590 --> 05:14.040
So no matter which place it has in the method argument list here.

05:14.320 --> 05:18.580
So I just wanted to make sure that this doesn't lead to any confusion.

05:18.580 --> 05:23.620
So let's turn this back to dollars and you went to get access to the data we actually passed in our

05:23.620 --> 05:32.230
own event and now in the app component typescript file I will add on navigate and here I will receive

05:32.230 --> 05:37.040
D where should we navigate to information so you may choose any name you want.

05:37.040 --> 05:43.960
Ogger with feature again there's a future we want to navigate to and now we should make sure that we

05:43.960 --> 05:46.900
actually store this feature.

05:47.140 --> 05:53.620
So maybe here we should say a loaded feature because well we store which feature should be displayed

05:53.980 --> 06:01.670
and initially that might be our recipes and maybe to make sure that we always use the same string that's

06:01.680 --> 06:02.090
Check it.

06:02.090 --> 06:06.020
Your recipe is to name your restis recipe feature.

06:06.220 --> 06:09.950
So let's go with recipe here to.

06:10.250 --> 06:17.390
And then on navigate I will set this loaded feature equal to the feature we receive here as an argument.

06:17.720 --> 06:24.370
And you could even omit this method and directly said loaded feature equal dollar sign event here.

06:24.470 --> 06:28.740
But I will go for a longer approach to be very explicit about what's happening here.

06:29.150 --> 06:33.170
So with that we're getting this loaded feature.

06:33.170 --> 06:38.960
Now we can use NGF to determine which of the two components should be displayed.

06:39.110 --> 06:49.820
App recipe's should be displayed if loaded feature equals recipe and shopping list should be displayed

06:49.970 --> 06:56.510
when ever loaded feature let's say does not equal a recipe.

06:56.610 --> 07:00.510
So that will also catch cases where it somehow is set to something else.

07:01.740 --> 07:04.650
So with that we're using NGF.

07:04.770 --> 07:06.450
Now let's see if that works.

07:06.510 --> 07:08.470
We only see the recipe now.

07:08.630 --> 07:13.420
And if I click on a shopping list we see the shopping list and the other way around.

07:13.680 --> 07:17.160
So now navigation is kind of working again.

07:17.190 --> 07:21.270
We will later improve this but for now that is a great solution.

07:21.540 --> 07:29.730
Now let's move on to making the list items your real list items living in their own component.
