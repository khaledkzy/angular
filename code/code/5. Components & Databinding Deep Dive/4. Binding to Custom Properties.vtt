WEBVTT

00:02.460 --> 00:10.320
So we learn that we can use property binding to bind to our own properties properties of our components.

00:10.320 --> 00:12.020
Now this is what I'll start with.

00:12.180 --> 00:19.050
So to temporarily prevent my app from crashing I will simply comment out the code in the cockpit so

00:19.050 --> 00:21.130
that this doesn't give us any arrows anymore.

00:21.150 --> 00:25.810
For now we won't be able to use it but it will not crash.

00:26.010 --> 00:32.440
Now in the server components or element component if we have a look at its typescript at its metafile

00:32.470 --> 00:38.850
excuse me you'll see that we try to access the element the single element is single server element and

00:38.850 --> 00:45.430
therefore we should create a property in this type script file element which represents our server.

00:45.690 --> 00:51.050
We can even assign a type by adding a colon and then simply defining the type which will be accomplished

00:51.130 --> 00:53.490
with object and stickily braces.

00:53.640 --> 01:00.030
And just because it's important does it's not the value does typescript syntax for defining the type

01:00.030 --> 01:07.800
to make sure that element may only have this type and we then know that the element will have well what

01:07.800 --> 01:09.000
we're trying to access here.

01:09.030 --> 01:15.940
A type a name and a content so will have a type and type on its own will be of type String.

01:15.990 --> 01:21.430
We will then have a name which will be a string and we'll have a content which will be a string.

01:21.480 --> 01:29.820
So is all now our type definition for a property we want to use in our age email account we use year

01:29.880 --> 01:38.070
in all these places now still this element this property is part of this component only of the server

01:38.130 --> 01:39.450
element component.

01:39.450 --> 01:41.810
We can't access it from outside.

01:41.850 --> 01:49.320
Now it would be great if in our component where we manage our server or our array of server elements

01:49.320 --> 01:55.500
I should say if he could somehow access this property because let's say just so that we can see something

01:55.890 --> 02:06.670
we start with one server a year which is of type server has a name of test server and a content of just

02:07.030 --> 02:07.750
a test.

02:07.810 --> 02:12.660
And just to be super clear does Kolins here are not type definitions.

02:12.670 --> 02:14.730
We're on the right side of the equals sign.

02:14.770 --> 02:20.140
So here we are assigning a value and the value here simply as a javascript object and in javascript

02:20.140 --> 02:26.470
objects we simply assign key value pairs or we create key value pairs by having the key then Nicollet

02:26.560 --> 02:27.430
and then the value.

02:27.490 --> 02:30.190
So normal javascript syntax here.

02:30.220 --> 02:32.510
So now we get our server elements array.

02:32.590 --> 02:38.440
We're looping frood is a year on the app server element in any app server element.

02:38.440 --> 02:41.190
We have our aliment property.

02:41.230 --> 02:43.640
So a property in that component.

02:43.850 --> 02:47.610
Now we want to access this component from outside.

02:47.950 --> 02:53.700
So it would be great if we could bind to it just like we were able to bind to disabled.

02:53.890 --> 02:59.980
So maybe add square brackets add entered the name of the property in between.

03:00.130 --> 03:09.390
So the name of the property in the component year this name and then assign the server element so simply

03:09.390 --> 03:15.370
the element we store for each iteration in this variable here what the great if it could do this.

03:15.450 --> 03:22.710
And if we try this and our app reloads we see that we get an error that we can't bind to element because

03:22.710 --> 03:26.930
it isn't a known property of app server element.

03:26.940 --> 03:29.150
Now you would say that is not true.

03:29.280 --> 03:32.490
It is a property of Sir element here.

03:32.520 --> 03:34.140
We defined it as a property.

03:34.140 --> 03:35.640
It's even public right.

03:35.640 --> 03:38.040
We didn't at private in front of it or anything like that.

03:38.040 --> 03:48.000
So why can't we accept some law answer because by default all properties or components are only accessible

03:48.000 --> 03:50.830
inside these components not from outside.

03:50.940 --> 03:53.730
And that generally is a good thing.

03:53.760 --> 03:58.360
You don't want to make all your properties buying the bull from outside.

03:58.800 --> 04:05.710
So you have to be explicit about which properties you want to expose to the to the world so to say.

04:06.040 --> 04:12.970
So you want to allow parent components to be able to bind to this property.

04:13.170 --> 04:15.980
You need to add something to that element property.

04:16.080 --> 04:18.210
You need to add a decorator.

04:18.210 --> 04:22.600
Remember I said that decorators are not only available for classes.

04:22.740 --> 04:31.620
Here we're going to add onto this property the decorator we need to add is at input here important you

04:31.620 --> 04:33.550
need to execute it.

04:33.570 --> 04:35.340
It's like a function in the end.

04:35.460 --> 04:43.350
So add parentheses and input now needs to be imported from at angular core.

04:43.350 --> 04:51.870
With this in place now we are successfully exposing this property to the world.

04:51.870 --> 04:59.880
So now any parent component any component hosting our server element component so implementing it through

04:59.880 --> 05:08.190
its selector like we do here is now able to bind to element and I can demonstrate as if we save this

05:08.620 --> 05:15.530
you now see just that last year you see our component because now we replicate this component for well

05:15.600 --> 05:25.710
each element in the array and we successfully can pass the element the property down to that component

05:25.860 --> 05:29.360
and bind to the element property in that component.

05:29.670 --> 05:36.330
And this is how you can set up custom property binding on your own events exposing your own properties

05:36.570 --> 05:40.950
to the components where you implement these components through the selector
